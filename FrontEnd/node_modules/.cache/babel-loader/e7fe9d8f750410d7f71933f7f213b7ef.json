{"ast":null,"code":"var _jsxFileName = \"E:\\\\NeogCampProjects\\\\LevelOneProjects\\\\Video-Library\\\\video-library-app\\\\src\\\\Component\\\\PlayList\\\\PlaylistModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { usePlaylist } from \"../../Contexter/playListContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const PlaylistModal = () => {\n  _s();\n\n  const [text, setText] = React.useState(\"\");\n  const {\n    playList,\n    playlistId,\n    inputPlaylistBox,\n    showPlaylistModal,\n    dispatchplaylist\n  } = usePlaylist();\n\n  const handleKeyPress = event => {\n    if (event.key === \"Enter\") {\n      handleOnclick();\n    }\n  };\n\n  const handleOnclick = () => {\n    dispatchplaylist({\n      type: \"DISPLAY_INPUT_BOX\"\n    });\n    text !== \"\" && dispatchplaylist({\n      type: \"CREATE_PLAY_LIST\"\n    });\n    setText(\"\");\n  };\n\n  const handlePlaylistCheckbox = (e, playlistId) => {\n    let listId = e.target.id;\n\n    if (e.target.checked === true) {\n      let videoData = showPlaylistModal.videoData;\n      addToPlaylist(playlistId, listId, dispatchplaylist, videoData);\n    } else {\n      let videoId = showPlaylistModal.videoData._id;\n      removeFromPlaylist(playlistId, listId, videoId, dispatchplaylist);\n    }\n  };\n\n  const itemChecked = id => {\n    return playList.filter(item => item._id === id)[0].list.some(item => {\n      return item._id === showPlaylistModal.videoData._id ? true : false;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `modal ${showPlaylistModal.status === false ? \"modal-hide\" : \"modal-show\"}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal--window\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"modal--title\",\n          children: \"Playlist\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: () => dispatchplaylist({\n            type: \"SHOW_PLAYLIST_MODAL\"\n          }),\n          children: /*#__PURE__*/_jsxDEV(\"ion-icon\", {\n            name: \"close-outline\",\n            class: \"modal--icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal--content\",\n          children: [inputPlaylistBox && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal--input\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Enter Playlist Name\",\n              className: \"modal--input-box\",\n              onChange: event => setText(event.target.value),\n              onKeyPress: event => handleKeyPress(event)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-outline-secondary\",\n              onClick: handleOnclick,\n              children: \"Create\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this), playList.map(item => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"playlist-names\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                name: \"playlist-item\",\n                className: \"playlist-checkbox\",\n                id: item._id,\n                checked: itemChecked(item._id),\n                onChange: e => handlePlaylistCheckbox(e, playlistId)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: item._id,\n                children: item.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 19\n              }, this)]\n            }, item._id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 17\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal--buttons\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-secondary\",\n            onClick: () => dispatchplaylist({\n              type: \"DISPLAY_INPUT_BOX\"\n            }),\n            children: \"New\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(PlaylistModal, \"LYI3ln1QWZdaxOicGT3+OXgo/Ro=\", false, function () {\n  return [usePlaylist];\n});\n\n_c = PlaylistModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlaylistModal\");","map":{"version":3,"sources":["E:/NeogCampProjects/LevelOneProjects/Video-Library/video-library-app/src/Component/PlayList/PlaylistModal.js"],"names":["React","useState","usePlaylist","PlaylistModal","text","setText","playList","playlistId","inputPlaylistBox","showPlaylistModal","dispatchplaylist","handleKeyPress","event","key","handleOnclick","type","handlePlaylistCheckbox","e","listId","target","id","checked","videoData","addToPlaylist","videoId","_id","removeFromPlaylist","itemChecked","filter","item","list","some","status","value","map","name"],"mappings":"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","sourcesContent":["import React,{ useState } from \"react\";\r\nimport { usePlaylist } from \"../../Contexter/playListContext\";\r\n\r\nexport const PlaylistModal = () => {\r\n  const [text, setText] = React.useState(\"\");\r\n  const {\r\n    playList,\r\n    playlistId,\r\n    inputPlaylistBox,\r\n    showPlaylistModal,\r\n    dispatchplaylist,\r\n  } = usePlaylist();\r\n\r\n  const handleKeyPress = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      handleOnclick();\r\n    }\r\n  };\r\n\r\n  const handleOnclick = () => {\r\n    dispatchplaylist({ type: \"DISPLAY_INPUT_BOX\" });\r\n    text !== \"\" && dispatchplaylist({ type: \"CREATE_PLAY_LIST\" });\r\n    setText(\"\");\r\n  };\r\n\r\n  const handlePlaylistCheckbox = (e, playlistId) => {\r\n    let listId = e.target.id;\r\n    if (e.target.checked === true) {\r\n      let videoData = showPlaylistModal.videoData;\r\n      addToPlaylist(playlistId, listId, dispatchplaylist, videoData);\r\n    } else {\r\n      let videoId = showPlaylistModal.videoData._id;\r\n      removeFromPlaylist(playlistId, listId, videoId, dispatchplaylist);\r\n    }\r\n  };\r\n\r\n  const itemChecked = (id) => {\r\n    return playList\r\n      .filter((item) => item._id === id)[0]\r\n      .list.some((item) => {\r\n        return item._id === showPlaylistModal.videoData._id ? true : false;\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={`modal ${\r\n          showPlaylistModal.status === false ? \"modal-hide\" : \"modal-show\"\r\n        }`}>\r\n        <div className=\"modal--window\">\r\n          <h1 className=\"modal--title\">Playlist</h1>\r\n          <span\r\n            onClick={() => dispatchplaylist({ type: \"SHOW_PLAYLIST_MODAL\" })}>\r\n            <ion-icon name=\"close-outline\" class=\"modal--icon\"></ion-icon>\r\n          </span>\r\n\r\n          <div className=\"modal--content\">\r\n            {inputPlaylistBox && (\r\n              <div className=\"modal--input\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Enter Playlist Name\"\r\n                  className=\"modal--input-box\"\r\n                  onChange={(event) => setText(event.target.value)}\r\n                  onKeyPress={(event) => handleKeyPress(event)}\r\n                />\r\n                <button\r\n                  className=\"btn btn-outline-secondary\"\r\n                  onClick={handleOnclick}>\r\n                  Create\r\n                </button>\r\n              </div>\r\n            )}\r\n            {playList.map((item) => {\r\n              return (\r\n                <div key={item._id} className=\"playlist-names\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    name=\"playlist-item\"\r\n                    className=\"playlist-checkbox\"\r\n                    id={item._id}\r\n                    checked={itemChecked(item._id)}\r\n                    onChange={(e) => handlePlaylistCheckbox(e, playlistId)}\r\n                  />\r\n\r\n                  <label htmlFor={item._id}>{item.name}</label>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <div className=\"modal--buttons\">\r\n            <button\r\n              className=\"btn btn-secondary\"\r\n              onClick={() => dispatchplaylist({ type: \"DISPLAY_INPUT_BOX\" })}>\r\n              New\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};"]},"metadata":{},"sourceType":"module"}