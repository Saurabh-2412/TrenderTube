{"ast":null,"code":"var _jsxFileName = \"E:\\\\NeogCampProjects\\\\LevelOneProjects\\\\Video-Library\\\\video-library-app\\\\src\\\\Component\\\\PlayList\\\\PlaylistModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { usePlaylist } from \"../../Contexter/playListContext\";\nimport \"../../App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PlaylistModal = () => {\n  _s();\n\n  const [text, setText] = useState(\"\");\n  const {\n    playList,\n    playlistId,\n    inputPlaylistBox,\n    showPlaylistModal,\n    dispatchplaylist\n  } = usePlaylist();\n\n  const handleKeyPress = event => {\n    if (event.key === \"Enter\") {\n      handleOnclick();\n    }\n  };\n\n  const playlist = {\n    name: text\n  };\n\n  const handleOnclick = () => {\n    dispatchplaylist({\n      type: \"DISPLAY_INPUT_BOX\"\n    });\n    text !== \"\" && dispatchplaylist({\n      type: \"CREATE_PLAY_LIST\",\n      payload: playlist\n    });\n    setText(\"\");\n  };\n\n  const handlePlaylistCheckbox = (e, playlistId) => {\n    let listId = e.target.id;\n\n    if (e.target.checked === true) {\n      let videoData = showPlaylistModal.videoData;\n      dispatchplaylist({\n        type: \"SAVE_TO_PLAYLIST\"\n      });\n    } else {\n      let videoId = showPlaylistModal.videoData._id;\n      dispatchplaylist({\n        type: \"REMOVE_FROM_PLAYLIST\"\n      });\n    }\n  };\n  /* const itemChecked = (id) => {\r\n    return playList\r\n      .filter((item) => item._id === id)[0]\r\n      .list.some((item) => {\r\n        return item._id === showPlaylistModal.videoData._id ? true : false;\r\n      });\r\n  }; */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `modal ${showPlaylistModal.status === false ? \"modal-hide\" : \"modal-show\"}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal--window\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"modal--title\",\n        children: [\"Playlist\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"modal--icon\",\n          onClick: () => dispatchplaylist({\n            type: \"SHOW_PLAYLIST_MODAL\"\n          }),\n          children: /*#__PURE__*/_jsxDEV(\"ion-icon\", {\n            name: \"close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal--content\",\n        children: [inputPlaylistBox && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal--input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter Playlist Name\",\n            className: \"modal--input-box\",\n            onChange: event => setText(event.target.value),\n            onKeyPress: event => handleKeyPress(event)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-outline-secondary\",\n            onClick: handleOnclick,\n            children: \"Create\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }, this), playList.map(item => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"playlist-names\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              name: \"playlist-item\",\n              className: \"playlist-checkbox\",\n              id: item._id,\n              checked: itemChecked(item._id),\n              onChange: e => handlePlaylistCheckbox(e, playlistId)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: item._id,\n              children: item.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 33\n            }, this)]\n          }, item._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal--buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary\",\n          onClick: () => dispatchplaylist({\n            type: \"DISPLAY_INPUT_BOX\"\n          }),\n          children: \"New\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PlaylistModal, \"LYI3ln1QWZdaxOicGT3+OXgo/Ro=\", false, function () {\n  return [usePlaylist];\n});\n\n_c = PlaylistModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlaylistModal\");","map":{"version":3,"sources":["E:/NeogCampProjects/LevelOneProjects/Video-Library/video-library-app/src/Component/PlayList/PlaylistModal.js"],"names":["React","useState","usePlaylist","PlaylistModal","text","setText","playList","playlistId","inputPlaylistBox","showPlaylistModal","dispatchplaylist","handleKeyPress","event","key","handleOnclick","playlist","name","type","payload","handlePlaylistCheckbox","e","listId","target","id","checked","videoData","videoId","_id","status","value","map","item","itemChecked"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA+B,OAA/B;AACA,SAASC,WAAT,QAA4B,iCAA5B;AACA,OAAO,eAAP;;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAAA;;AACjC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AACJK,IAAAA,QADI;AAEJC,IAAAA,UAFI;AAGJC,IAAAA,gBAHI;AAIJC,IAAAA,iBAJI;AAKJC,IAAAA;AALI,MAMFR,WAAW,EANf;;AAQA,QAAMS,cAAc,GAAIC,KAAD,IAAW;AAChC,QAAIA,KAAK,CAACC,GAAN,KAAc,OAAlB,EAA2B;AACzBC,MAAAA,aAAa;AACd;AACF,GAJD;;AAMA,QAAMC,QAAQ,GAAG;AACfC,IAAAA,IAAI,EAAEZ;AADS,GAAjB;;AAIA,QAAMU,aAAa,GAAG,MAAM;AAC1BJ,IAAAA,gBAAgB,CAAC;AAAEO,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAhB;AACAb,IAAAA,IAAI,KAAK,EAAT,IAAeM,gBAAgB,CAAC;AAAEO,MAAAA,IAAI,EAAE,kBAAR;AAA4BC,MAAAA,OAAO,EAAEH;AAArC,KAAD,CAA/B;AACAV,IAAAA,OAAO,CAAC,EAAD,CAAP;AACD,GAJD;;AAMA,QAAMc,sBAAsB,GAAG,CAACC,CAAD,EAAIb,UAAJ,KAAmB;AAChD,QAAIc,MAAM,GAAGD,CAAC,CAACE,MAAF,CAASC,EAAtB;;AACA,QAAIH,CAAC,CAACE,MAAF,CAASE,OAAT,KAAqB,IAAzB,EAA+B;AAC7B,UAAIC,SAAS,GAAGhB,iBAAiB,CAACgB,SAAlC;AACAf,MAAAA,gBAAgB,CAAC;AAACO,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAhB;AACD,KAHD,MAGO;AACL,UAAIS,OAAO,GAAGjB,iBAAiB,CAACgB,SAAlB,CAA4BE,GAA1C;AACAjB,MAAAA,gBAAgB,CAAC;AAACO,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAhB;AACD;AACF,GATD;AAWA;AACF;AACA;AACA;AACA;AACA;AACA;;;AAEI,sBACI;AAAK,IAAA,SAAS,EAAG,SAAQR,iBAAiB,CAACmB,MAAlB,KAA6B,KAA7B,GAAqC,YAArC,GAAoD,YAAa,EAA1F;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,cAAd;AAAA,4CACI;AAAM,UAAA,SAAS,EAAC,aAAhB;AACI,UAAA,OAAO,EAAE,MAAMlB,gBAAgB,CAAC;AAAEO,YAAAA,IAAI,EAAE;AAAR,WAAD,CADnC;AAAA,iCAEI;AAAU,YAAA,IAAI,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,gBADJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAOI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,mBACKT,gBAAgB,iBACb;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACI;AACI,YAAA,IAAI,EAAC,MADT;AAEI,YAAA,WAAW,EAAC,qBAFhB;AAGI,YAAA,SAAS,EAAC,kBAHd;AAII,YAAA,QAAQ,EAAGI,KAAD,IAAWP,OAAO,CAACO,KAAK,CAACU,MAAN,CAAaO,KAAd,CAJhC;AAKI,YAAA,UAAU,EAAGjB,KAAD,IAAWD,cAAc,CAACC,KAAD;AALzC;AAAA;AAAA;AAAA;AAAA,kBADJ,eAQI;AACI,YAAA,SAAS,EAAC,2BADd;AAEI,YAAA,OAAO,EAAEE,aAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBARJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFR,EAiBKR,QAAQ,CAACwB,GAAT,CAAcC,IAAD,IAAU;AACpB,8BACI;AAAoB,YAAA,SAAS,EAAC,gBAA9B;AAAA,oCACI;AACA,cAAA,IAAI,EAAC,UADL;AAEA,cAAA,IAAI,EAAC,eAFL;AAGA,cAAA,SAAS,EAAC,mBAHV;AAIA,cAAA,EAAE,EAAEA,IAAI,CAACJ,GAJT;AAKA,cAAA,OAAO,EAAEK,WAAW,CAACD,IAAI,CAACJ,GAAN,CALpB;AAMA,cAAA,QAAQ,EAAGP,CAAD,IAAOD,sBAAsB,CAACC,CAAD,EAAIb,UAAJ;AANvC;AAAA;AAAA;AAAA;AAAA,oBADJ,eASI;AAAO,cAAA,OAAO,EAAEwB,IAAI,CAACJ,GAArB;AAAA,wBAA2BI,IAAI,CAACf;AAAhC;AAAA;AAAA;AAAA;AAAA,oBATJ;AAAA,aAAUe,IAAI,CAACJ,GAAf;AAAA;AAAA;AAAA;AAAA,kBADJ;AAaH,SAdA,CAjBL;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ,eAyCI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,+BACI;AAAQ,UAAA,SAAS,EAAC,mBAAlB;AACI,UAAA,OAAO,EAAE,MAAMjB,gBAAgB,CAAC;AAAEO,YAAAA,IAAI,EAAE;AAAR,WAAD,CADnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAzCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAoDH,CAjGM;;GAAMd,a;UAQPD,W;;;KAROC,a","sourcesContent":["import React,{ useState } from \"react\";\r\nimport { usePlaylist } from \"../../Contexter/playListContext\";\r\nimport \"../../App.css\";\r\n\r\nexport const PlaylistModal = () => {\r\n  const [text, setText] = useState(\"\");\r\n  const {\r\n    playList,\r\n    playlistId,\r\n    inputPlaylistBox,\r\n    showPlaylistModal,\r\n    dispatchplaylist,\r\n  } = usePlaylist();\r\n\r\n  const handleKeyPress = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      handleOnclick();\r\n    }\r\n  };\r\n\r\n  const playlist = {\r\n    name: text\r\n  }\r\n\r\n  const handleOnclick = () => {\r\n    dispatchplaylist({ type: \"DISPLAY_INPUT_BOX\" });\r\n    text !== \"\" && dispatchplaylist({ type: \"CREATE_PLAY_LIST\", payload: playlist });\r\n    setText(\"\");\r\n  };\r\n\r\n  const handlePlaylistCheckbox = (e, playlistId) => {\r\n    let listId = e.target.id;\r\n    if (e.target.checked === true) {\r\n      let videoData = showPlaylistModal.videoData;\r\n      dispatchplaylist({type: \"SAVE_TO_PLAYLIST\"});\r\n    } else {\r\n      let videoId = showPlaylistModal.videoData._id;\r\n      dispatchplaylist({type: \"REMOVE_FROM_PLAYLIST\"});\r\n    }\r\n  };\r\n\r\n  /* const itemChecked = (id) => {\r\n    return playList\r\n      .filter((item) => item._id === id)[0]\r\n      .list.some((item) => {\r\n        return item._id === showPlaylistModal.videoData._id ? true : false;\r\n      });\r\n  }; */\r\n\r\n    return (\r\n        <div className={`modal ${showPlaylistModal.status === false ? \"modal-hide\" : \"modal-show\"}`}>\r\n            <div className=\"modal--window\">\r\n                <h1 className=\"modal--title\">Playlist\r\n                    <span className=\"modal--icon\"\r\n                        onClick={() => dispatchplaylist({ type: \"SHOW_PLAYLIST_MODAL\" })}>\r\n                        <ion-icon name=\"close\"></ion-icon>\r\n                    </span>\r\n                </h1>\r\n                <div className=\"modal--content\">\r\n                    {inputPlaylistBox && (\r\n                        <div className=\"modal--input\">\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Enter Playlist Name\"\r\n                                className=\"modal--input-box\"\r\n                                onChange={(event) => setText(event.target.value)}\r\n                                onKeyPress={(event) => handleKeyPress(event)}\r\n                            />\r\n                            <button\r\n                                className=\"btn btn-outline-secondary\"\r\n                                onClick={handleOnclick}>\r\n                                Create\r\n                            </button>\r\n                        </div>\r\n                    )}\r\n                    {playList.map((item) => {\r\n                        return (\r\n                            <div key={item._id} className=\"playlist-names\">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                name=\"playlist-item\"\r\n                                className=\"playlist-checkbox\"\r\n                                id={item._id}\r\n                                checked={itemChecked(item._id)}\r\n                                onChange={(e) => handlePlaylistCheckbox(e, playlistId)}\r\n                                />\r\n                                <label htmlFor={item._id}>{item.name}</label>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n\r\n                <div className=\"modal--buttons\">\r\n                    <button className=\"btn btn-secondary\"\r\n                        onClick={() => dispatchplaylist({ type: \"DISPLAY_INPUT_BOX\" })}>\r\n                        New\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};"]},"metadata":{},"sourceType":"module"}